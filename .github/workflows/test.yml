name: 'Outbound HTTP Logger CI'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['3.2', '3.3', '3.4']
        rails-version: ['7.2.0', '8.0.2']
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: false

      - name: Install dependencies
        run: |
          gem install rails -v ${{ matrix.rails-version }}
          bundle update activerecord activesupport --conservative
          bundle install --jobs 4 --retry 3

      - name: Run tests
        run: |
          # Run tests individually to avoid interference issues
          bundle exec ruby -Ilib:test test/patches/test_net_http_patch.rb
          bundle exec ruby -Ilib:test test/concerns/test_outbound_logging.rb
          bundle exec ruby -Ilib:test test/integration/test_loggable_integration.rb
          bundle exec ruby -Ilib:test test/models/test_outbound_request_log.rb
          bundle exec ruby -Ilib:test test/test_outbound_http_logger.rb

      - name: Run RuboCop
        run: |
          # Install RuboCop and required plugins from root Gemfile
          bundle install --jobs 4 --retry 3
          bundle exec rubocop --config .rubocop.yml
        continue-on-error: true

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: false

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Build gem
        run: |
          bundle exec rake build

      - name: Upload gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: outbound-http-logger-gem
          path: ./*.gem
          retention-days: 7

  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: false

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Validate gemspec
        run: |
          bundle exec gem build outbound_http_logger.gemspec
          bundle exec gem specification *.gem

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" lib/ test/ --exclude-dir=.git; then
            echo "⚠️  Found TODO/FIXME comments. Consider addressing them."
            exit 1
          else
            echo "✅ No TODO/FIXME comments found"
          fi
        continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: false

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Run bundle audit
        run: |
          echo "Installing bundler-audit..."
          gem install bundler-audit
          bundle-audit check --update
        continue-on-error: true

  summary:
    runs-on: ubuntu-latest
    needs: [test, build, quality, security]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "## Job Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed"
            exit 1
          elif [[ "${{ needs.quality.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "⚠️  Quality or security checks failed, but build is functional"
            exit 0
          else
            echo "✅ All checks passed"
            exit 0
          fi
