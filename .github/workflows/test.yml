name: 'Outbound HTTP Logger CI'

on:
  push:
    branches: [ main, 'release/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      full_matrix:
        description: 'Run full Ruby/Rails matrix'
        required: false
        default: false
        type: boolean

jobs:
  matrix-info:
    runs-on: ubuntu-latest
    steps:
      - name: Show matrix configuration
        run: |
          echo "## Matrix Configuration" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/') || github.event.inputs.full_matrix }}" == "true" ]]; then
            echo "üîÑ **Full Matrix**: Testing Ruby 3.2, 3.3, 3.4 √ó Rails 7.2.0, 8.0.1 (6 combinations)" >> $GITHUB_STEP_SUMMARY
            echo "Triggered by: Release branch, tag, or manual dispatch" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö° **Fast Matrix**: Testing Ruby 3.4 √ó Rails 7.2.0 only (1 combination)" >> $GITHUB_STEP_SUMMARY
            echo "Triggered by: Regular PR or main branch push" >> $GITHUB_STEP_SUMMARY
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Default to Ruby 3.4 + Rails 7.2.0 for fast feedback
        # Full matrix for release branches, tags, or manual dispatch
        ruby-version: ${{ (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/') || github.event.inputs.full_matrix == 'true') && fromJSON('["3.2", "3.3", "3.4"]') || fromJSON('["3.4"]') }}
        rails-version: ${{ (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/') || github.event.inputs.full_matrix == 'true') && fromJSON('["7.2.0", "8.0.1"]') || fromJSON('["7.2.0"]') }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Run RuboCop
        run: |
          bundle exec rake rubocop

      - name: Run tests
        env:
          STRICT_TEST_ISOLATION: true
        run: |
          # Run all tests together (thread-safe with proper isolation)
          bundle exec rake test

  postgresql-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Same conditional matrix as main test job
        ruby-version: ${{ (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/') || github.event.inputs.full_matrix == 'true') && fromJSON('["3.2", "3.3", "3.4"]') || fromJSON('["3.4"]') }}
        rails-version: ${{ (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/') || github.event.inputs.full_matrix == 'true') && fromJSON('["7.2.0", "8.0.1"]') || fromJSON('["7.2.0"]') }}

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: outbound_http_logger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Set up PostgreSQL environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/outbound_http_logger_test" >> $GITHUB_ENV
          echo "OUTBOUND_HTTP_LOGGER_TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/outbound_http_logger_test" >> $GITHUB_ENV

      - name: Test PostgreSQL connection and adapters
        run: |
          ./bin/test-databases

      - name: Run database adapter tests with PostgreSQL
        env:
          STRICT_TEST_ISOLATION: true
        run: |
          bundle exec ruby -Itest test/test_database_adapters.rb

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: false

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Build gem
        run: |
          bundle exec rake build

      - name: Upload gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: outbound-http-logger-gem
          path: ./*.gem
          retention-days: 7

  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: false

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Validate gemspec
        run: |
          bundle exec gem build outbound_http_logger.gemspec
          bundle exec gem specification *.gem

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" lib/ test/ --exclude-dir=.git; then
            echo "‚ö†Ô∏è  Found TODO/FIXME comments. Consider addressing them."
            exit 1
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi
        continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: false

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      - name: Run bundle audit
        run: |
          echo "Installing bundler-audit..."
          gem install bundler-audit
          bundle-audit check --update
        continue-on-error: true

  summary:
    runs-on: ubuntu-latest
    needs: [test, build, quality, security]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "## Job Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Critical jobs failed"
            exit 1
          elif [[ "${{ needs.quality.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Quality or security checks failed, but build is functional"
            exit 0
          else
            echo "‚úÖ All checks passed"
            exit 0
          fi
